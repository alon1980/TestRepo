name: Create Release on PR Merge

on:
  pull_request:
    types: [closed]

jobs:
  create_release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Get latest release
        id: get_latest_release
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GIT }}
        run: |
          # Get the latest release tag starting with 5.70.*
          latest_release=$(gh release list --limit 1 --json tagName --jq '.[] | select(.tagName | startswith("5.70.")) | .tagName')
          if [ -z "$latest_release" ]; then
            echo "5.70.0" >> latest_tag.txt
          else
            echo "$latest_release" >> latest_tag.txt
          fi
          echo "Latest release: $(cat latest_tag.txt)"
        
      - name: Calculate next release tag
        id: next_release_tag
        run: |
          # Split the latest release tag and increment the patch version
          latest_tag=$(cat latest_tag.txt)
          if [[ $latest_tag =~ ^5\.70\.([0-9]+)$ ]]; then
            patch_version=${BASH_REMATCH[1]}
            next_patch_version=$((patch_version + 1))
            next_tag="5.70.${next_patch_version}"
            echo "Next tag: $next_tag"
            echo "next_tag=$next_tag" >> $GITHUB_ENV
          else
            echo "Failed to calculate next tag"
            exit 1
          fi

      - name: Create release notes
        id: release_notes
        run: |
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "PR_LINK=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV
          echo "PR_AUTHOR=${{ github.event.pull_request.user.login }}" >> $GITHUB_ENV

          # Format release notes
          release_notes="* ${{ github.event.pull_request.title }} - [PR Link](${{ github.event.pull_request.html_url }}) - created by ${{ github.event.pull_request.user.login }}"
          echo "$release_notes" >> release_notes.md

      - name: Create new release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.next_tag }} --title "KMS SaaS ${{ env.next_tag }}" --notes-file release_notes.md
